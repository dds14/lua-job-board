{"ast":null,"code":"var _jsxFileName = \"/Users/dereksams/Desktop/lua-job-board/src/components/MainJobBoard/MainJobBoard.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./MainJobBoard.scss\";\nexport default class ParentComponent extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: [{\n        id: 1,\n        date: \"2014-04-18\",\n        total: 121.0,\n        status: \"Shipped\",\n        name: \"A\",\n        points: 5,\n        percent: 50\n      }, {\n        id: 2,\n        date: \"2014-04-21\",\n        total: 121.0,\n        status: \"Not Shipped\",\n        name: \"B\",\n        points: 10,\n        percent: 60\n      }, {\n        id: 3,\n        date: \"2014-08-09\",\n        total: 121.0,\n        status: \"Not Shipped\",\n        name: \"C\",\n        points: 15,\n        percent: 70\n      }, {\n        id: 4,\n        date: \"2014-04-24\",\n        total: 121.0,\n        status: \"Shipped\",\n        name: \"D\",\n        points: 20,\n        percent: 80\n      }, {\n        id: 5,\n        date: \"2014-04-26\",\n        total: 121.0,\n        status: \"Shipped\",\n        name: \"E\",\n        points: 25,\n        percent: 90\n      }],\n      expandedRows: []\n    };\n  }\n\n  componentDidMount(e) {\n    axios.get(\"/getjobs\").then(res => {\n      this.setState({\n        jobs: res.data\n      });\n      consolelog(\"mounted\");\n    });\n  }\n\n  handleRowClick(rowId) {\n    const currentExpandedRows = this.state.expandedRows;\n    const isRowCurrentlyExpanded = currentExpandedRows.includes(rowId);\n    const newExpandedRows = isRowCurrentlyExpanded ? currentExpandedRows.filter(id => id !== rowId) : currentExpandedRows.concat(rowId);\n    this.setState({\n      expandedRows: newExpandedRows\n    });\n  }\n\n  renderItem(item) {\n    const clickCallback = () => this.handleRowClick(item.id);\n\n    const itemRows = [React.createElement(\"tr\", {\n      onClick: clickCallback,\n      key: \"row-data-\" + item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, item.date), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, item.total), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, item.status))];\n\n    if (this.state.expandedRows.includes(item.id)) {\n      itemRows.push(React.createElement(\"tr\", {\n        key: \"row-expanded-\" + item.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, item.name), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, item.points), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, item.percent)));\n    }\n\n    return itemRows;\n  }\n\n  render() {\n    let allItemRows = [];\n    this.state.data.forEach(item => {\n      const perItemRows = this.renderItem(item);\n      allItemRows = allItemRows.concat(perItemRows);\n    });\n    return React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, allItemRows);\n  }\n\n} // export default class MainJobBoard extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       jobs: [],\n//       dropdownIsOpen: true,\n//       dropdownId: 0,\n//       prevDropdownId: 0\n//     };\n//     this.handleDropdown = this.handleDropdown.bind(this);\n//     // this.dropdownId = this.dropdownId.bind(this);\n//   }\n// componentDidMount(e) {\n//   axios.get(\"/getjobs\").then(res => {\n//     this.setState({ jobs: res.data });\n//   });\n// }\n//   handleDropdown(e) {\n//     this.setState({ dropdownIsOpen: !this.state.dropdownIsOpen });\n//     // this.setState(prevState => ({\n//     //   prevDropdownId: prevState.dropdownId\n//     // }));\n//     this.setState({ prevDropdownId: this.state.dropdownId++ });\n//     console.log(this.state.dropdownIsOpen);\n//     console.log(\"previously: \" + this.state.dropdownId);\n//     console.log(\"hey\");\n//   }\n//   render() {\n//     console.log(\"currently \" + this.state.prevDropdownId);\n//     return (\n//       <div onClick={this.handleDropdown}>\n//         {this.state.jobs.map((val, index) => {\n//           return (\n//             <div\n//             // onClick={() =>\n//             //   this.setState(prevState => ({\n//             //     prevDropdownId: prevState.dropdownId\n//             //   }))\n//             // }\n//             >\n//               <div onClick={this.handleDropdown}>\n//                 <div\n//                   className=\"all-jobs\"\n//                   // onClick={this.handleDropdown}\n//                   onClick={() => this.setState({ dropdownId: val.id })}\n//                 >\n//                   <h1>{\"dropdownId:\" + this.state.dropdownId}</h1>\n//                   {/* <h1>{val.id}</h1> */}\n//                   <div className=\"pre-dropdown-container\">\n//                     <div className=\"company-logo-div\">\n//                       <img\n//                         className=\"company-logo\"\n//                         src={val.company_logo}\n//                       ></img>\n//                     </div>\n//                     <div className=\"title-and-company-div\">\n//                       <div className=\"title-div\">{val.job_name}</div>\n//                       <div className=\"company-div\">\n//                         <p className=\"company-paragraph\">{val.company_name}</p>\n//                         <p> | </p>\n//                         <p className=\"location-paragraph\">\n//                           <strong>{val.job_location}</strong>\n//                         </p>\n//                       </div>\n//                     </div>\n//                     <div className=\"days-ago-div\">{val.days_since_posted}</div>\n//                     <div className=\"apply-now-div\">\n//                       <form action={val.company_email} target=\"_blank\">\n//                         <button type=\"submit\" className=\"apply-now-button\">\n//                           Apply\n//                         </button>\n//                       </form>\n//                     </div>\n//                   </div>\n//                   {/* <div className=\"content\"></div> */}\n//                   <div\n//                     className={\n//                       \"myclass-\" +\n//                       (this.state.prevDropdownId !== this.state.dropdownId\n//                         ? 0\n//                         : 1)\n//                     }\n//                   >\n//                     {this.state.dropdownId === val.id ? (\n//                       <h3>{\"val.id= \" + val.id + \" \" + val.job_description}</h3>\n//                     ) : (\n//                       <h1 className=\"do-not-display\">\n//                         {this.state.prevDropdownId + \"\" + this.state.dropdownId}\n//                       </h1>\n//                     )}\n//                     {/* <h1>hasdfey</h1> */}\n//                   </div>\n//                 </div>\n//               </div>\n//             </div>\n//           );\n//         })}\n//       </div>\n//     );\n//   }\n// }\n// this.state.prevDropdownId !== val.id ? (\n// this.state.prevDropdownId !== this.state.dropdownId &&\n// this.state.dropdownIsOpen === false &&","map":{"version":3,"sources":["/Users/dereksams/Desktop/lua-job-board/src/components/MainJobBoard/MainJobBoard.js"],"names":["React","Component","axios","ParentComponent","constructor","state","data","id","date","total","status","name","points","percent","expandedRows","componentDidMount","e","get","then","res","setState","jobs","consolelog","handleRowClick","rowId","currentExpandedRows","isRowCurrentlyExpanded","includes","newExpandedRows","filter","concat","renderItem","item","clickCallback","itemRows","push","render","allItemRows","forEach","perItemRows"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,qBAAP;AAEA,eAAe,MAAMC,eAAN,SAA8BF,SAA9B,CAAwC;AACrDG,EAAAA,WAAW,GAAG;AACZ;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,CACJ;AACEC,QAAAA,EAAE,EAAE,CADN;AAEEC,QAAAA,IAAI,EAAE,YAFR;AAGEC,QAAAA,KAAK,EAAE,KAHT;AAIEC,QAAAA,MAAM,EAAE,SAJV;AAKEC,QAAAA,IAAI,EAAE,GALR;AAMEC,QAAAA,MAAM,EAAE,CANV;AAOEC,QAAAA,OAAO,EAAE;AAPX,OADI,EAUJ;AACEN,QAAAA,EAAE,EAAE,CADN;AAEEC,QAAAA,IAAI,EAAE,YAFR;AAGEC,QAAAA,KAAK,EAAE,KAHT;AAIEC,QAAAA,MAAM,EAAE,aAJV;AAKEC,QAAAA,IAAI,EAAE,GALR;AAMEC,QAAAA,MAAM,EAAE,EANV;AAOEC,QAAAA,OAAO,EAAE;AAPX,OAVI,EAmBJ;AACEN,QAAAA,EAAE,EAAE,CADN;AAEEC,QAAAA,IAAI,EAAE,YAFR;AAGEC,QAAAA,KAAK,EAAE,KAHT;AAIEC,QAAAA,MAAM,EAAE,aAJV;AAKEC,QAAAA,IAAI,EAAE,GALR;AAMEC,QAAAA,MAAM,EAAE,EANV;AAOEC,QAAAA,OAAO,EAAE;AAPX,OAnBI,EA4BJ;AACEN,QAAAA,EAAE,EAAE,CADN;AAEEC,QAAAA,IAAI,EAAE,YAFR;AAGEC,QAAAA,KAAK,EAAE,KAHT;AAIEC,QAAAA,MAAM,EAAE,SAJV;AAKEC,QAAAA,IAAI,EAAE,GALR;AAMEC,QAAAA,MAAM,EAAE,EANV;AAOEC,QAAAA,OAAO,EAAE;AAPX,OA5BI,EAqCJ;AACEN,QAAAA,EAAE,EAAE,CADN;AAEEC,QAAAA,IAAI,EAAE,YAFR;AAGEC,QAAAA,KAAK,EAAE,KAHT;AAIEC,QAAAA,MAAM,EAAE,SAJV;AAKEC,QAAAA,IAAI,EAAE,GALR;AAMEC,QAAAA,MAAM,EAAE,EANV;AAOEC,QAAAA,OAAO,EAAE;AAPX,OArCI,CADK;AAgDXC,MAAAA,YAAY,EAAE;AAhDH,KAAb;AAkDD;;AAEDC,EAAAA,iBAAiB,CAACC,CAAD,EAAI;AACnBd,IAAAA,KAAK,CAACe,GAAN,CAAU,UAAV,EAAsBC,IAAtB,CAA2BC,GAAG,IAAI;AAChC,WAAKC,QAAL,CAAc;AAAEC,QAAAA,IAAI,EAAEF,GAAG,CAACb;AAAZ,OAAd;AACAgB,MAAAA,UAAU,CAAC,SAAD,CAAV;AACD,KAHD;AAID;;AAEDC,EAAAA,cAAc,CAACC,KAAD,EAAQ;AACpB,UAAMC,mBAAmB,GAAG,KAAKpB,KAAL,CAAWS,YAAvC;AACA,UAAMY,sBAAsB,GAAGD,mBAAmB,CAACE,QAApB,CAA6BH,KAA7B,CAA/B;AAEA,UAAMI,eAAe,GAAGF,sBAAsB,GAC1CD,mBAAmB,CAACI,MAApB,CAA2BtB,EAAE,IAAIA,EAAE,KAAKiB,KAAxC,CAD0C,GAE1CC,mBAAmB,CAACK,MAApB,CAA2BN,KAA3B,CAFJ;AAIA,SAAKJ,QAAL,CAAc;AAAEN,MAAAA,YAAY,EAAEc;AAAhB,KAAd;AACD;;AAEDG,EAAAA,UAAU,CAACC,IAAD,EAAO;AACf,UAAMC,aAAa,GAAG,MAAM,KAAKV,cAAL,CAAoBS,IAAI,CAACzB,EAAzB,CAA5B;;AACA,UAAM2B,QAAQ,GAAG,CACf;AAAI,MAAA,OAAO,EAAED,aAAb;AAA4B,MAAA,GAAG,EAAE,cAAcD,IAAI,CAACzB,EAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKyB,IAAI,CAACxB,IAAV,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKwB,IAAI,CAACvB,KAAV,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKuB,IAAI,CAACtB,MAAV,CAHF,CADe,CAAjB;;AAQA,QAAI,KAAKL,KAAL,CAAWS,YAAX,CAAwBa,QAAxB,CAAiCK,IAAI,CAACzB,EAAtC,CAAJ,EAA+C;AAC7C2B,MAAAA,QAAQ,CAACC,IAAT,CACE;AAAI,QAAA,GAAG,EAAE,kBAAkBH,IAAI,CAACzB,EAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKyB,IAAI,CAACrB,IAAV,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKqB,IAAI,CAACpB,MAAV,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKoB,IAAI,CAACnB,OAAV,CAHF,CADF;AAOD;;AAED,WAAOqB,QAAP;AACD;;AAEDE,EAAAA,MAAM,GAAG;AACP,QAAIC,WAAW,GAAG,EAAlB;AAEA,SAAKhC,KAAL,CAAWC,IAAX,CAAgBgC,OAAhB,CAAwBN,IAAI,IAAI;AAC9B,YAAMO,WAAW,GAAG,KAAKR,UAAL,CAAgBC,IAAhB,CAApB;AACAK,MAAAA,WAAW,GAAGA,WAAW,CAACP,MAAZ,CAAmBS,WAAnB,CAAd;AACD,KAHD;AAKA,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQF,WAAR,CAAP;AACD;;AA1GoD,C,CA6GvsourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./MainJobBoard.scss\";\n\nexport default class ParentComponent extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      data: [\n        {\n          id: 1,\n          date: \"2014-04-18\",\n          total: 121.0,\n          status: \"Shipped\",\n          name: \"A\",\n          points: 5,\n          percent: 50\n        },\n        {\n          id: 2,\n          date: \"2014-04-21\",\n          total: 121.0,\n          status: \"Not Shipped\",\n          name: \"B\",\n          points: 10,\n          percent: 60\n        },\n        {\n          id: 3,\n          date: \"2014-08-09\",\n          total: 121.0,\n          status: \"Not Shipped\",\n          name: \"C\",\n          points: 15,\n          percent: 70\n        },\n        {\n          id: 4,\n          date: \"2014-04-24\",\n          total: 121.0,\n          status: \"Shipped\",\n          name: \"D\",\n          points: 20,\n          percent: 80\n        },\n        {\n          id: 5,\n          date: \"2014-04-26\",\n          total: 121.0,\n          status: \"Shipped\",\n          name: \"E\",\n          points: 25,\n          percent: 90\n        }\n      ],\n      expandedRows: []\n    };\n  }\n\n  componentDidMount(e) {\n    axios.get(\"/getjobs\").then(res => {\n      this.setState({ jobs: res.data });\n      consolelog(\"mounted\");\n    });\n  }\n\n  handleRowClick(rowId) {\n    const currentExpandedRows = this.state.expandedRows;\n    const isRowCurrentlyExpanded = currentExpandedRows.includes(rowId);\n\n    const newExpandedRows = isRowCurrentlyExpanded\n      ? currentExpandedRows.filter(id => id !== rowId)\n      : currentExpandedRows.concat(rowId);\n\n    this.setState({ expandedRows: newExpandedRows });\n  }\n\n  renderItem(item) {\n    const clickCallback = () => this.handleRowClick(item.id);\n    const itemRows = [\n      <tr onClick={clickCallback} key={\"row-data-\" + item.id}>\n        <td>{item.date}</td>\n        <td>{item.total}</td>\n        <td>{item.status}</td>\n      </tr>\n    ];\n\n    if (this.state.expandedRows.includes(item.id)) {\n      itemRows.push(\n        <tr key={\"row-expanded-\" + item.id}>\n          <td>{item.name}</td>\n          <td>{item.points}</td>\n          <td>{item.percent}</td>\n        </tr>\n      );\n    }\n\n    return itemRows;\n  }\n\n  render() {\n    let allItemRows = [];\n\n    this.state.data.forEach(item => {\n      const perItemRows = this.renderItem(item);\n      allItemRows = allItemRows.concat(perItemRows);\n    });\n\n    return <table>{allItemRows}</table>;\n  }\n}\n\n// export default class MainJobBoard extends Component {\n//   constructor(props) {\n//     super(props);\n\n//     this.state = {\n//       jobs: [],\n//       dropdownIsOpen: true,\n//       dropdownId: 0,\n//       prevDropdownId: 0\n//     };\n//     this.handleDropdown = this.handleDropdown.bind(this);\n//     // this.dropdownId = this.dropdownId.bind(this);\n//   }\n\n// componentDidMount(e) {\n//   axios.get(\"/getjobs\").then(res => {\n//     this.setState({ jobs: res.data });\n//   });\n// }\n\n//   handleDropdown(e) {\n//     this.setState({ dropdownIsOpen: !this.state.dropdownIsOpen });\n//     // this.setState(prevState => ({\n//     //   prevDropdownId: prevState.dropdownId\n//     // }));\n//     this.setState({ prevDropdownId: this.state.dropdownId++ });\n//     console.log(this.state.dropdownIsOpen);\n//     console.log(\"previously: \" + this.state.dropdownId);\n//     console.log(\"hey\");\n//   }\n\n//   render() {\n//     console.log(\"currently \" + this.state.prevDropdownId);\n//     return (\n//       <div onClick={this.handleDropdown}>\n//         {this.state.jobs.map((val, index) => {\n//           return (\n//             <div\n//             // onClick={() =>\n//             //   this.setState(prevState => ({\n//             //     prevDropdownId: prevState.dropdownId\n//             //   }))\n//             // }\n//             >\n//               <div onClick={this.handleDropdown}>\n//                 <div\n//                   className=\"all-jobs\"\n//                   // onClick={this.handleDropdown}\n//                   onClick={() => this.setState({ dropdownId: val.id })}\n//                 >\n//                   <h1>{\"dropdownId:\" + this.state.dropdownId}</h1>\n//                   {/* <h1>{val.id}</h1> */}\n//                   <div className=\"pre-dropdown-container\">\n//                     <div className=\"company-logo-div\">\n//                       <img\n//                         className=\"company-logo\"\n//                         src={val.company_logo}\n//                       ></img>\n//                     </div>\n//                     <div className=\"title-and-company-div\">\n//                       <div className=\"title-div\">{val.job_name}</div>\n//                       <div className=\"company-div\">\n//                         <p className=\"company-paragraph\">{val.company_name}</p>\n//                         <p> | </p>\n//                         <p className=\"location-paragraph\">\n//                           <strong>{val.job_location}</strong>\n//                         </p>\n//                       </div>\n//                     </div>\n//                     <div className=\"days-ago-div\">{val.days_since_posted}</div>\n//                     <div className=\"apply-now-div\">\n//                       <form action={val.company_email} target=\"_blank\">\n//                         <button type=\"submit\" className=\"apply-now-button\">\n//                           Apply\n//                         </button>\n//                       </form>\n//                     </div>\n//                   </div>\n//                   {/* <div className=\"content\"></div> */}\n//                   <div\n//                     className={\n//                       \"myclass-\" +\n//                       (this.state.prevDropdownId !== this.state.dropdownId\n//                         ? 0\n//                         : 1)\n//                     }\n//                   >\n//                     {this.state.dropdownId === val.id ? (\n//                       <h3>{\"val.id= \" + val.id + \" \" + val.job_description}</h3>\n//                     ) : (\n//                       <h1 className=\"do-not-display\">\n//                         {this.state.prevDropdownId + \"\" + this.state.dropdownId}\n//                       </h1>\n//                     )}\n//                     {/* <h1>hasdfey</h1> */}\n//                   </div>\n//                 </div>\n//               </div>\n//             </div>\n//           );\n//         })}\n//       </div>\n//     );\n//   }\n// }\n\n// this.state.prevDropdownId !== val.id ? (\n// this.state.prevDropdownId !== this.state.dropdownId &&\n// this.state.dropdownIsOpen === false &&\n"]},"metadata":{},"sourceType":"module"}